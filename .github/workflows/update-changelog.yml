name: Update Changelog file and version

on:
  workflow_call:
    inputs:
      changelog-file:
        description: 'Path to the changelog file'
        required: false
        type: string
        default: 'CHANGELOG.md'
      enable-npm-version:
        description: 'Update version in package.json'
        required: false
        type: boolean
        default: true
      target-branch:
        description: 'Branch to update changelog on'
        required: false
        type: string
        default: 'main'
      version-title-template:
        description: 'Template for version title (supports {version} and {date})'
        required: false
        type: string
        default: 'v:{version} - {date}'
    outputs:
      new_version:
        description: 'New version number'
        value: ${{ jobs.update-changelog.outputs.new_version }}

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    name: Update Changelog file and version
    concurrency:
      group: ${{ github.workflow }}-${{ inputs.target-branch }}-${{ inputs.changelog-file }}
      cancel-in-progress: true
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Extract changes since last tag
        id: changes
        run: | #shell
          function decho() {
            if [ ! -z "$CHANGELOG_DEBUG" ]; then
              echo "Debug:" "$@" 1>&2
            fi
          }

          function extract_section() {
            local SOURCE_TEXT=$1
            
            if echo "$SOURCE_TEXT" | grep -qi '/changelog'; then
              decho "found /changelog"
              if echo "$SOURCE_TEXT" | grep -qi '/-changelog'; then
                decho "found /-changelog"
                RAW_CHANGELOG_SECTION=`echo "$SOURCE_TEXT" | sed -n '/\/changelog/I,/\/-changelog/Ip'`
              else
                decho "fallback without /-changelog"
                RAW_CHANGELOG_SECTION=`echo "$SOURCE_TEXT" | sed -n '/\/changelog/I,$p'`
              fi
            else
              decho "no /changelog found"
              RAW_CHANGELOG_SECTION=
            fi

            # If no changelog section found, try getting it from ## Changelog and ---
            if [ -z "$RAW_CHANGELOG_SECTION" ]; then
              decho "starting ## Changelog and --- checks"
              if echo "$SOURCE_TEXT" | grep -qi '## Changelog'; then
                decho "found ## Changelog"
                if echo "$SOURCE_TEXT" | grep -q -- '---'; then
                  decho "found ---"
                  RAW_CHANGELOG_SECTION=`echo "$SOURCE_TEXT" | sed -n '/## Changelog/I,/---/p'`
                  if [ -z "$RAW_CHANGELOG_SECTION" ]; then
                    decho "fallback without ---"
                    RAW_CHANGELOG_SECTION=`echo "$SOURCE_TEXT" | sed -n '/## Changelog/I,$p'`
                  fi
                else
                  decho "fallback without ---"
                  RAW_CHANGELOG_SECTION=`echo "$SOURCE_TEXT" | sed -n '/## Changelog/I,$p'`
                fi
              else
                decho "no ## Changelog found"
                RAW_CHANGELOG_SECTION=
              fi
            fi

            # If no changelog section found, try getting it from <details><summary>Changelog {patch|minor|major}</summary>...</details> tag
            if [ -z "$RAW_CHANGELOG_SECTION" ]; then
              decho "starting <details><summary>Changelog checks"
              if echo "$SOURCE_TEXT" | grep -qi '<details><summary>Changelog'; then
                decho "found <details><summary>Changelog"
                RAW_CHANGELOG_SECTION=`echo "$SOURCE_TEXT" | sed -n '/<details><summary>Changelog/I,/<\/details>/Ip'`
              fi
            fi

            if [ -z "$RAW_CHANGELOG_SECTION" ]; then
              echo -e "No changelog section. Use /changelog {patch|minor|major} followed by your changelog notes" 1>&2
              if [ ! -z "$EXAMPLE_CHANGELOG" ]; then
                echo -e "Example changelog section:\n$EXAMPLE_CHANGELOG" 1>&2
              fi
              exit 1
            fi
            echo "$RAW_CHANGELOG_SECTION"
          }

          function extract_changelog() {
            local SOURCE_TEXT=$1
            local CHANGELOG_NOTE=`echo "$SOURCE_TEXT" | grep -vi '/changelog' | grep -vi '/-changelog' | grep -vi '<details><summary>Changelog' | grep -vi '</details>' | grep -vi '## Changelog' | grep -v -- '---'`

            if [ -z "$CHANGELOG_NOTE" ]; then
              echo -e "No changelog notes found changelog section. Use /changelog {patch|minor|major} followed by your changelog notes" 1>&2
              if [ ! -z "$EXAMPLE_CHANGELOG" ]; then
                echo -e "Example changelog section:\n$EXAMPLE_CHANGELOG" 1>&2
              fi
              exit 1
            fi

            echo "$CHANGELOG_NOTE"
          }

          function extract_change_level() {
            local SOURCE_TEXT=$1
            if echo "$SOURCE_TEXT" | grep -i '/changelog' | grep -qiE 'patch|minor|major'; then
              CHANGE_LEVEL=`echo "$SOURCE_TEXT" | grep -i '/changelog' | grep -iEo 'patch|minor|major'`
            elif echo "$SOURCE_TEXT" | grep -i '## Changelog' | grep -qiE 'patch|minor|major'; then
              CHANGE_LEVEL=`echo "$SOURCE_TEXT" | grep -i '## Changelog' | grep -iEo 'patch|minor|major'`
            elif echo "$SOURCE_TEXT" | grep -i '<details><summary>Changelog' | grep -qiE 'patch|minor|major'; then
              CHANGE_LEVEL=`echo "$SOURCE_TEXT" | grep -i '<details><summary>Changelog' | grep -iEo 'patch|minor|major'`
            else
              CHANGE_LEVEL="${DEFAULT_CHANGE_LEVEL:-patch}"
            fi
            echo "$CHANGE_LEVEL"
          }

           function get_max_change_level() {
            local CHANGE_LEVEL=$1
            local OTHER_CHANGE_LEVEL=$2

            if [ -z "$CHANGE_LEVEL" ] && [ ! -z "$OTHER_CHANGE_LEVEL" ]; then
              CHANGE_LEVEL="$OTHER_CHANGE_LEVEL"
            elif [ "$CHANGE_LEVEL" == "patch" ]; then
              # if change level is patch, set commit change level
              CHANGE_LEVEL="$OTHER_CHANGE_LEVEL"
            elif [ "$CHANGE_LEVEL" == "minor" ] && [ "$OTHER_CHANGE_LEVEL" == "major" ]; then
              # if change level is minor, and current is major, set current
              CHANGE_LEVEL="$OTHER_CHANGE_LEVEL"
            fi
            
            echo "$CHANGE_LEVEL"
          }

          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -n "$PREVIOUS_TAG" ]]; then
            GIT_RANGE="${PREVIOUS_TAG}..HEAD"
          else
            GIT_RANGE="HEAD"
          fi

          echo "Previous tag: $PREVIOUS_TAG"
          echo "Git range: $GIT_RANGE"
          
          CHANGE_LEVEL="patch"
          TEMP_FILE=$(mktemp)
          
          for COMMIT in $(git rev-list $GIT_RANGE); do
            COMMIT_MSG=$(git log --format=%B -n 1 $COMMIT)

            if ! RAW_CHANGELOG_SECTION=`extract_section "$COMMIT_MSG"`; then
              continue;
            fi
            if ! CHANGELOG_NOTE=`extract_changelog "$RAW_CHANGELOG_SECTION"`; then
              continue;
            fi
            COMMIT_CHANGE_LEVEL=`extract_change_level "$RAW_CHANGELOG_SECTION"`
            echo "Commit change level: $COMMIT_CHANGE_LEVEL"
              
            CHANGE_LEVEL=`get_max_change_level "$CHANGE_LEVEL" "$COMMIT_CHANGE_LEVEL"`

            echo "$CHANGELOG_NOTE" >> $TEMP_FILE
          done
          
          echo "notes=$(cat $TEMP_FILE)"
          echo "level=$CHANGE_LEVEL"

          echo "level=$CHANGE_LEVEL" >> $GITHUB_OUTPUT
          echo "notes<<EOF_CHANGELOG" >> $GITHUB_OUTPUT
          cat $TEMP_FILE >> $GITHUB_OUTPUT
          echo "EOF_CHANGELOG" >> $GITHUB_OUTPUT

      - name: Update changelog file
        if: steps.changes.outputs.notes != ''
        env:
          NOTES: ${{ steps.changes.outputs.notes }}
        run: | #shell
          if [[ ! -f ${{ inputs.changelog-file }} ]]; then
            echo "# Changelog" > ${{ inputs.changelog-file }}
          fi

          CURRENT_DATE=$(date '+%Y-%m-%d')
          TITLE_TEMPLATE="${{ inputs.version-title-template }}"
          FORMATTED_TITLE="${TITLE_TEMPLATE/\{version\}/${{ steps.changes.outputs.level }}}"
          FORMATTED_TITLE="${FORMATTED_TITLE/\{date\}/$CURRENT_DATE}"
          
          npx --yes changelog-tools add ${{ inputs.changelog-file }} \
            -t "$FORMATTED_TITLE" \
            --new-changelog "$NOTES" \
            -o ${{ inputs.changelog-file }}

      - name: Update version
        if: steps.changes.outputs.notes != ''
        id: version
        run: | #shell
          NEW_VERSION=$(npx --yes changelog-tools ${{ inputs.changelog-file }} | jq -r '.versions[0].version')
          echo "Updating version..."
          echo "New version: $NEW_VERSION"
          
          if [[ -f package.json ]] && ${{ inputs.enable-npm-version }}; then
            npm version "$NEW_VERSION" --no-git-tag-version --allow-same-version
            git add package.json
          fi
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.changes.outputs.notes != ''
        run: | #shell
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ inputs.changelog-file }}
          git commit -m "chore: update changelog - v${{ steps.version.outputs.new_version }}"
          git push origin ${{ inputs.target-branch }}
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"
